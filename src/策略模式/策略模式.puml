@startuml


interface IAction {
    int operation(int arg);
}

class ActionStrategyA implements IAction {
    int operation(int arg);
}

class ActionStrategyB implements IAction {
    int operation(int arg);
}


class ActionStrategyC implements IAction {
    int operation(int arg);
}

class ActionFactory {

    IAction action;

    void init(int type);

    int getResult(int input);
}

ActionFactory *-- ActionStrategyA
ActionFactory *-- ActionStrategyB
ActionFactory *-- ActionStrategyC

note as N1

  策略模式就是用来封装算法的，但是在实践中，
  我们可以用它封装几乎任何类型的变化，
  只要在分析过程中听到需要在不同的时间应用不同的业务规则，
  就可以考虑使用策略模式处理这种变化的可能性。
end note


@enduml